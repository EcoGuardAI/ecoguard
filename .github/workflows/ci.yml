name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 02:00 UTC to catch dependency issues
    - cron: '0 2 * * *'

env:
  FORCE_COLOR: 1

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Check code formatting with black
      run: |
        black --check --diff src/ tests/
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff src/ tests/
    
    - name: Lint with ruff
      run: |
        ruff check src/ tests/
    
    - name: Lint with flake8 (non-blocking)
      run: |
        # Critical errors that should fail the build
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # All other linting issues are reported but don't fail the build
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics --output-file=flake8-report.txt || true
    
    - name: Type check with mypy
      run: |
        mypy src/ --strict
    
    - name: Check docstring style
      run: |
        pydocstyle src/ --convention=google || true
    
    - name: Upload code quality reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-quality-reports
        path: |
          flake8-report.txt

  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        os: [ubuntu-latest, windows-latest, macos-latest]
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            python-version: "3.8"
          - os: macos-latest
            python-version: "3.8"

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,runtime]"
    
    - name: Test with pytest
      run: |
        pytest tests/ --cov=src/ --cov-report=xml --cov-report=term-missing --cov-fail-under=80 -v
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[security]"
    
    - name: Security check with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json
        bandit -r src/ --severity-level medium
    
    - name: Check dependencies with safety
      run: |
        safety check --output=json
    
    - name: Check for secrets with detect-secrets
      run: |
        # Initialize baseline if it doesn't exist
        if [ ! -f .secrets.baseline ]; then
          detect-secrets scan --baseline .secrets.baseline
        fi
        detect-secrets scan --baseline .secrets.baseline
    
    - name: Semgrep security scan (non-blocking)
      run: |
        semgrep --config=auto src/ --json --output=semgrep-report.json || true
        semgrep --config=auto src/ || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json

  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: Install pip-audit
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit
    
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit || true
    
    - name: Check for outdated packages
      run: |
        pip list --outdated --format=json > outdated-packages.json || true
    
    - name: Upload dependency reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-reports
        path: |
          pip-audit-report.json
          outdated-packages.json

  self-analysis:
    name: EcoGuard AI Self-Analysis
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: Install EcoGuard AI
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[runtime]"
    
    - name: Run EcoGuard AI Analysis on source code
      run: |
        echo "üå± Running EcoGuard AI Analysis on source code..."
        ecoguard analyze src/ --format json --output ecoguard-src-results.json
        ecoguard analyze src/ --format table
        echo "‚úÖ Source code analysis completed"
    
    - name: Run EcoGuard AI Analysis on tests
      run: |
        echo "üß™ Running EcoGuard AI Analysis on tests..."
        ecoguard analyze tests/ --format json --output ecoguard-tests-results.json
        ecoguard analyze tests/ --format table
        echo "‚úÖ Test code analysis completed"
    
    - name: Analyze test sample (demo)
      run: |
        echo "üîç Analyzing test sample file..."
        ecoguard analyze test_sample.py --format table
    
    - name: Generate comprehensive report
      run: |
        echo "üìä Generating comprehensive EcoGuard AI report..."
        ecoguard analyze . --format json --output ecoguard-full-results.json --exclude "*.git/*,*.venv/*,*__pycache__/*,*.pytest_cache/*,*.mypy_cache/*"
    
    - name: Upload EcoGuard AI results
      uses: actions/upload-artifact@v4
      with:
        name: ecoguard-analysis
        path: |
          ecoguard-src-results.json
          ecoguard-tests-results.json
          ecoguard-full-results.json

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,runtime]"
        pip install pytest-benchmark
    
    - name: Run performance benchmarks
      run: |
        pytest tests/ -k "benchmark" --benchmark-json=benchmark-results.json || true
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: benchmark-results.json

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [code-quality, test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine check-manifest
    
    - name: Check manifest
      run: |
        check-manifest
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        python -m twine check dist/*
    
    - name: Test package installation
      run: |
        pip install dist/*.whl
        ecoguard --version
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Check docstring coverage
      run: |
        pip install docstring-coverage
        docstring-coverage src/ --badge=docs-coverage.svg || true
    
    - name: Build documentation (placeholder)
      run: |
        echo "üìö Documentation build will be implemented in future stages"
        # Future: sphinx-build -b html docs/ docs/_build/html
        mkdir -p docs/_build/html
        echo "<h1>EcoGuard AI Documentation</h1><p>Coming soon in future development stages!</p>" > docs/_build/html/index.html
    
    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: |
          docs/_build/html/
          docs-coverage.svg

  collect-artifacts:
    name: Collect All Artifacts
    runs-on: ubuntu-latest
    needs: [code-quality, test, security, dependency-check, self-analysis, performance-test, build, docs]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Create summary report
      run: |
        echo "# EcoGuard AI CI/CD Pipeline Summary" > pipeline-summary.md
        echo "Generated on: $(date)" >> pipeline-summary.md
        echo "" >> pipeline-summary.md
        echo "## Artifacts Generated:" >> pipeline-summary.md
        find artifacts/ -type f -name "*.json" -o -name "*.xml" -o -name "*.txt" | sort >> pipeline-summary.md
    
    - name: Upload combined artifacts
      uses: actions/upload-artifact@v4
      with:
        name: all-pipeline-artifacts
        path: |
          artifacts/
          pipeline-summary.md
