{
  "project_path": "src",
  "analysis_time": "2025-06-07T15:30:57.188834+00:00",
  "summary": {
    "total_files": 12,
    "total_issues": 219,
    "by_category": {
      "quality": 64,
      "security": 0,
      "green": 26,
      "ai_code": 129,
      "syntax": 0,
      "system": 0
    },
    "by_severity": {
      "debug": 0,
      "info": 44,
      "warning": 175,
      "error": 0,
      "critical": 0
    },
    "overall_green_score": 87.91666666666667,
    "overall_security_score": 100.0
  },
  "file_results": [
    {
      "file_path": "src/ecoguard_ai/__init__.py",
      "analysis_time": "2025-06-07T15:30:57.092107+00:00",
      "summary": {
        "total_issues": 4,
        "critical": 0,
        "error": 0,
        "warning": 0,
        "info": 4,
        "green_score": 100.0,
        "security_score": 100.0
      },
      "issues": [
        {
          "rule_id": "unused_import",
          "category": "quality",
          "severity": "info",
          "message": "Import 'EcoGuardAnalyzer' is not used",
          "file_path": "src/ecoguard_ai/__init__.py",
          "line": 13,
          "column": 0,
          "end_line": 13,
          "end_column": 54,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused import 'EcoGuardAnalyzer'",
            "replacement_code": "# Remove import line",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.2,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Import",
          "rule_description": "Import statement is not used in the module",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.091397+00:00"
        },
        {
          "rule_id": "unused_import",
          "category": "quality",
          "severity": "info",
          "message": "Import 'Issue' is not used",
          "file_path": "src/ecoguard_ai/__init__.py",
          "line": 14,
          "column": 0,
          "end_line": 14,
          "end_column": 50,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused import 'Issue'",
            "replacement_code": "# Remove import line",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.2,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Import",
          "rule_description": "Import statement is not used in the module",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.091732+00:00"
        },
        {
          "rule_id": "unused_import",
          "category": "quality",
          "severity": "info",
          "message": "Import 'Severity' is not used",
          "file_path": "src/ecoguard_ai/__init__.py",
          "line": 14,
          "column": 0,
          "end_line": 14,
          "end_column": 50,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused import 'Severity'",
            "replacement_code": "# Remove import line",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.2,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Import",
          "rule_description": "Import statement is not used in the module",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.091738+00:00"
        },
        {
          "rule_id": "unused_import",
          "category": "quality",
          "severity": "info",
          "message": "Import 'AnalysisResult' is not used",
          "file_path": "src/ecoguard_ai/__init__.py",
          "line": 15,
          "column": 0,
          "end_line": 15,
          "end_column": 50,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused import 'AnalysisResult'",
            "replacement_code": "# Remove import line",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.2,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Import",
          "rule_description": "Import statement is not used in the module",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.091748+00:00"
        }
      ],
      "metadata": {
        "file_path": "src/ecoguard_ai/__init__.py",
        "file_size": 577,
        "line_count": 22
      }
    },
    {
      "file_path": "src/ecoguard_ai/analyzers/__init__.py",
      "analysis_time": "2025-06-07T15:30:57.092484+00:00",
      "summary": {
        "total_issues": 4,
        "critical": 0,
        "error": 0,
        "warning": 0,
        "info": 4,
        "green_score": 100.0,
        "security_score": 100.0
      },
      "issues": [
        {
          "rule_id": "unused_import",
          "category": "quality",
          "severity": "info",
          "message": "Import 'EcoGuardAnalyzer' is not used",
          "file_path": "src/ecoguard_ai/analyzers/__init__.py",
          "line": 13,
          "column": 0,
          "end_line": 13,
          "end_column": 54,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused import 'EcoGuardAnalyzer'",
            "replacement_code": "# Remove import line",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.2,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Import",
          "rule_description": "Import statement is not used in the module",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.092398+00:00"
        },
        {
          "rule_id": "unused_import",
          "category": "quality",
          "severity": "info",
          "message": "Import 'Issue' is not used",
          "file_path": "src/ecoguard_ai/analyzers/__init__.py",
          "line": 14,
          "column": 0,
          "end_line": 14,
          "end_column": 50,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused import 'Issue'",
            "replacement_code": "# Remove import line",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.2,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Import",
          "rule_description": "Import statement is not used in the module",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.092404+00:00"
        },
        {
          "rule_id": "unused_import",
          "category": "quality",
          "severity": "info",
          "message": "Import 'Severity' is not used",
          "file_path": "src/ecoguard_ai/analyzers/__init__.py",
          "line": 14,
          "column": 0,
          "end_line": 14,
          "end_column": 50,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused import 'Severity'",
            "replacement_code": "# Remove import line",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.2,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Import",
          "rule_description": "Import statement is not used in the module",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.092407+00:00"
        },
        {
          "rule_id": "unused_import",
          "category": "quality",
          "severity": "info",
          "message": "Import 'AnalysisResult' is not used",
          "file_path": "src/ecoguard_ai/analyzers/__init__.py",
          "line": 15,
          "column": 0,
          "end_line": 15,
          "end_column": 50,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused import 'AnalysisResult'",
            "replacement_code": "# Remove import line",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.2,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Import",
          "rule_description": "Import statement is not used in the module",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.092410+00:00"
        }
      ],
      "metadata": {
        "file_path": "src/ecoguard_ai/analyzers/__init__.py",
        "file_size": 453,
        "line_count": 14
      }
    },
    {
      "file_path": "src/ecoguard_ai/analyzers/base.py",
      "analysis_time": "2025-06-07T15:30:57.101012+00:00",
      "summary": {
        "total_issues": 13,
        "critical": 0,
        "error": 0,
        "warning": 9,
        "info": 4,
        "green_score": 100.0,
        "security_score": 100.0
      },
      "issues": [
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'self' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/base.py",
          "line": 30,
          "column": 16,
          "end_line": 30,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'self' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _self",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.093857+00:00"
        },
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'tree' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/base.py",
          "line": 30,
          "column": 22,
          "end_line": 30,
          "end_column": 35,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'tree' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _tree",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.093864+00:00"
        },
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'source_code' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/base.py",
          "line": 30,
          "column": 37,
          "end_line": 30,
          "end_column": 53,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'source_code' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _source_code",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.093867+00:00"
        },
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'file_path' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/base.py",
          "line": 30,
          "column": 55,
          "end_line": 30,
          "end_column": 69,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'file_path' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _file_path",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.093871+00:00"
        },
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'self' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/base.py",
          "line": 84,
          "column": 14,
          "end_line": 84,
          "end_column": 18,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'self' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _self",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.094003+00:00"
        },
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'node' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/base.py",
          "line": 84,
          "column": 20,
          "end_line": 84,
          "end_column": 33,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'node' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _node",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.094006+00:00"
        },
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'source_code' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/base.py",
          "line": 84,
          "column": 35,
          "end_line": 84,
          "end_column": 51,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'source_code' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _source_code",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.094009+00:00"
        },
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'file_path' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/base.py",
          "line": 84,
          "column": 53,
          "end_line": 84,
          "end_column": 67,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'file_path' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _file_path",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.094012+00:00"
        },
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'self' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/base.py",
          "line": 155,
          "column": 17,
          "end_line": 155,
          "end_column": 21,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'self' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _self",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.094142+00:00"
        },
        {
          "rule_id": "unused_import",
          "category": "quality",
          "severity": "info",
          "message": "Import 'EcoGuardAnalyzer' is not used",
          "file_path": "src/ecoguard_ai/analyzers/base.py",
          "line": 13,
          "column": 0,
          "end_line": 13,
          "end_column": 54,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused import 'EcoGuardAnalyzer'",
            "replacement_code": "# Remove import line",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.2,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Import",
          "rule_description": "Import statement is not used in the module",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.094881+00:00"
        },
        {
          "rule_id": "unused_import",
          "category": "quality",
          "severity": "info",
          "message": "Import 'Severity' is not used",
          "file_path": "src/ecoguard_ai/analyzers/base.py",
          "line": 14,
          "column": 0,
          "end_line": 14,
          "end_column": 50,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused import 'Severity'",
            "replacement_code": "# Remove import line",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.2,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Import",
          "rule_description": "Import statement is not used in the module",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.094884+00:00"
        },
        {
          "rule_id": "unused_import",
          "category": "quality",
          "severity": "info",
          "message": "Import 'AnalysisResult' is not used",
          "file_path": "src/ecoguard_ai/analyzers/base.py",
          "line": 15,
          "column": 0,
          "end_line": 15,
          "end_column": 50,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused import 'AnalysisResult'",
            "replacement_code": "# Remove import line",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.2,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Import",
          "rule_description": "Import statement is not used in the module",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.094886+00:00"
        },
        {
          "rule_id": "too_many_params",
          "category": "quality",
          "severity": "info",
          "message": "Function '__init__' has 7 parameters (max: 5)",
          "file_path": "src/ecoguard_ai/analyzers/base.py",
          "line": 66,
          "column": 4,
          "end_line": 81,
          "end_column": 27,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider using a data class or dictionary to group related parameters",
            "replacement_code": "# Group related parameters into a data structure",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": 0.0,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Too Many Parameters",
          "rule_description": "Function has too many parameters",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.096031+00:00"
        }
      ],
      "metadata": {
        "file_path": "src/ecoguard_ai/analyzers/base.py",
        "file_size": 7067,
        "line_count": 234
      }
    },
    {
      "file_path": "src/ecoguard_ai/core/analyzer.py",
      "analysis_time": "2025-06-07T15:30:57.108611+00:00",
      "summary": {
        "total_issues": 2,
        "critical": 0,
        "error": 0,
        "warning": 0,
        "info": 2,
        "green_score": 100.0,
        "security_score": 100.0
      },
      "issues": [
        {
          "rule_id": "unused_import",
          "category": "quality",
          "severity": "info",
          "message": "Import 'EcoGuardAnalyzer' is not used",
          "file_path": "src/ecoguard_ai/core/analyzer.py",
          "line": 13,
          "column": 0,
          "end_line": 13,
          "end_column": 54,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused import 'EcoGuardAnalyzer'",
            "replacement_code": "# Remove import line",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.2,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Import",
          "rule_description": "Import statement is not used in the module",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.102836+00:00"
        },
        {
          "rule_id": "unused_import",
          "category": "quality",
          "severity": "info",
          "message": "Import 'Severity' is not used",
          "file_path": "src/ecoguard_ai/core/analyzer.py",
          "line": 14,
          "column": 0,
          "end_line": 14,
          "end_column": 50,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused import 'Severity'",
            "replacement_code": "# Remove import line",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.2,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Import",
          "rule_description": "Import statement is not used in the module",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.102842+00:00"
        }
      ],
      "metadata": {
        "file_path": "src/ecoguard_ai/core/analyzer.py",
        "file_size": 7105,
        "line_count": 220
      }
    },
    {
      "file_path": "src/ecoguard_ai/core/__init__.py",
      "analysis_time": "2025-06-07T15:30:57.109341+00:00",
      "summary": {
        "total_issues": 6,
        "critical": 0,
        "error": 0,
        "warning": 0,
        "info": 6,
        "green_score": 100.0,
        "security_score": 100.0
      },
      "issues": [
        {
          "rule_id": "unused_import",
          "category": "quality",
          "severity": "info",
          "message": "Import 'EcoGuardAnalyzer' is not used",
          "file_path": "src/ecoguard_ai/core/__init__.py",
          "line": 3,
          "column": 0,
          "end_line": 3,
          "end_column": 70,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused import 'EcoGuardAnalyzer'",
            "replacement_code": "# Remove import line",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.2,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Import",
          "rule_description": "Import statement is not used in the module",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.108999+00:00"
        },
        {
          "rule_id": "unused_import",
          "category": "quality",
          "severity": "info",
          "message": "Import 'Severity' is not used",
          "file_path": "src/ecoguard_ai/core/__init__.py",
          "line": 4,
          "column": 0,
          "end_line": 4,
          "end_column": 73,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused import 'Severity'",
            "replacement_code": "# Remove import line",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.2,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Import",
          "rule_description": "Import statement is not used in the module",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.109008+00:00"
        },
        {
          "rule_id": "unused_import",
          "category": "quality",
          "severity": "info",
          "message": "Import 'Category' is not used",
          "file_path": "src/ecoguard_ai/core/__init__.py",
          "line": 4,
          "column": 0,
          "end_line": 4,
          "end_column": 73,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused import 'Category'",
            "replacement_code": "# Remove import line",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.2,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Import",
          "rule_description": "Import statement is not used in the module",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.109012+00:00"
        },
        {
          "rule_id": "unused_import",
          "category": "quality",
          "severity": "info",
          "message": "Import 'Fix' is not used",
          "file_path": "src/ecoguard_ai/core/__init__.py",
          "line": 4,
          "column": 0,
          "end_line": 4,
          "end_column": 73,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused import 'Fix'",
            "replacement_code": "# Remove import line",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.2,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Import",
          "rule_description": "Import statement is not used in the module",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.109016+00:00"
        },
        {
          "rule_id": "unused_import",
          "category": "quality",
          "severity": "info",
          "message": "Import 'Impact' is not used",
          "file_path": "src/ecoguard_ai/core/__init__.py",
          "line": 4,
          "column": 0,
          "end_line": 4,
          "end_column": 73,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused import 'Impact'",
            "replacement_code": "# Remove import line",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.2,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Import",
          "rule_description": "Import statement is not used in the module",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.109019+00:00"
        },
        {
          "rule_id": "unused_import",
          "category": "quality",
          "severity": "info",
          "message": "Import 'ProjectAnalysisResult' is not used",
          "file_path": "src/ecoguard_ai/core/__init__.py",
          "line": 5,
          "column": 0,
          "end_line": 5,
          "end_column": 73,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused import 'ProjectAnalysisResult'",
            "replacement_code": "# Remove import line",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.2,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Import",
          "rule_description": "Import statement is not used in the module",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.109022+00:00"
        }
      ],
      "metadata": {
        "file_path": "src/ecoguard_ai/core/__init__.py",
        "file_size": 436,
        "line_count": 17
      }
    },
    {
      "file_path": "src/ecoguard_ai/core/result.py",
      "analysis_time": "2025-06-07T15:30:57.122229+00:00",
      "summary": {
        "total_issues": 31,
        "critical": 0,
        "error": 0,
        "warning": 13,
        "info": 18,
        "green_score": 0.0,
        "security_score": 100.0
      },
      "issues": [
        {
          "rule_id": "unused_import",
          "category": "quality",
          "severity": "info",
          "message": "Import 'EcoGuardAnalyzer' is not used",
          "file_path": "src/ecoguard_ai/core/result.py",
          "line": 3,
          "column": 0,
          "end_line": 3,
          "end_column": 70,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused import 'EcoGuardAnalyzer'",
            "replacement_code": "# Remove import line",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.2,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Import",
          "rule_description": "Import statement is not used in the module",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.112104+00:00"
        },
        {
          "rule_id": "unused_import",
          "category": "quality",
          "severity": "info",
          "message": "Import 'Fix' is not used",
          "file_path": "src/ecoguard_ai/core/result.py",
          "line": 4,
          "column": 0,
          "end_line": 4,
          "end_column": 73,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused import 'Fix'",
            "replacement_code": "# Remove import line",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.2,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Import",
          "rule_description": "Import statement is not used in the module",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.112109+00:00"
        },
        {
          "rule_id": "unused_import",
          "category": "quality",
          "severity": "info",
          "message": "Import 'Impact' is not used",
          "file_path": "src/ecoguard_ai/core/result.py",
          "line": 4,
          "column": 0,
          "end_line": 4,
          "end_column": 73,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused import 'Impact'",
            "replacement_code": "# Remove import line",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.2,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Import",
          "rule_description": "Import statement is not used in the module",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.112113+00:00"
        },
        {
          "rule_id": "unused_import",
          "category": "quality",
          "severity": "info",
          "message": "Import 'ProjectAnalysisResult' is not used",
          "file_path": "src/ecoguard_ai/core/result.py",
          "line": 5,
          "column": 0,
          "end_line": 5,
          "end_column": 73,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused import 'ProjectAnalysisResult'",
            "replacement_code": "# Remove import line",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.2,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Import",
          "rule_description": "Import statement is not used in the module",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.112115+00:00"
        },
        {
          "rule_id": "inefficient_string_concat",
          "category": "green",
          "severity": "warning",
          "message": "String concatenation in loop is inefficient. Use join() or f-strings instead",
          "file_path": "src/ecoguard_ai/core/result.py",
          "line": 96,
          "column": 16,
          "end_line": 96,
          "end_column": 29,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Use ''.join() for concatenating strings in loops",
            "replacement_code": "# Use parts = []; parts.append(item); result = ''.join(parts)",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.15,
            "security_risk": 0.0,
            "carbon_impact": 5.0,
            "maintainability": 0.0,
            "cost_impact": 0.0
          },
          "rule_name": "Inefficient String Concatenation",
          "rule_description": "String concatenation in loop is inefficient",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.114767+00:00"
        },
        {
          "rule_id": "inefficient_string_concat",
          "category": "green",
          "severity": "warning",
          "message": "String concatenation in loop is inefficient. Use join() or f-strings instead",
          "file_path": "src/ecoguard_ai/core/result.py",
          "line": 98,
          "column": 16,
          "end_line": 98,
          "end_column": 29,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Use ''.join() for concatenating strings in loops",
            "replacement_code": "# Use parts = []; parts.append(item); result = ''.join(parts)",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.15,
            "security_risk": 0.0,
            "carbon_impact": 5.0,
            "maintainability": 0.0,
            "cost_impact": 0.0
          },
          "rule_name": "Inefficient String Concatenation",
          "rule_description": "String concatenation in loop is inefficient",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.114780+00:00"
        },
        {
          "rule_id": "inefficient_string_concat",
          "category": "green",
          "severity": "warning",
          "message": "String concatenation in loop is inefficient. Use join() or f-strings instead",
          "file_path": "src/ecoguard_ai/core/result.py",
          "line": 100,
          "column": 16,
          "end_line": 100,
          "end_column": 29,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Use ''.join() for concatenating strings in loops",
            "replacement_code": "# Use parts = []; parts.append(item); result = ''.join(parts)",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.15,
            "security_risk": 0.0,
            "carbon_impact": 5.0,
            "maintainability": 0.0,
            "cost_impact": 0.0
          },
          "rule_name": "Inefficient String Concatenation",
          "rule_description": "String concatenation in loop is inefficient",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.114791+00:00"
        },
        {
          "rule_id": "inefficient_string_concat",
          "category": "green",
          "severity": "warning",
          "message": "String concatenation in loop is inefficient. Use join() or f-strings instead",
          "file_path": "src/ecoguard_ai/core/result.py",
          "line": 102,
          "column": 16,
          "end_line": 102,
          "end_column": 28,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Use ''.join() for concatenating strings in loops",
            "replacement_code": "# Use parts = []; parts.append(item); result = ''.join(parts)",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.15,
            "security_risk": 0.0,
            "carbon_impact": 5.0,
            "maintainability": 0.0,
            "cost_impact": 0.0
          },
          "rule_name": "Inefficient String Concatenation",
          "rule_description": "String concatenation in loop is inefficient",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.114802+00:00"
        },
        {
          "rule_id": "inefficient_string_concat",
          "category": "green",
          "severity": "warning",
          "message": "String concatenation in loop is inefficient. Use join() or f-strings instead",
          "file_path": "src/ecoguard_ai/core/result.py",
          "line": 125,
          "column": 16,
          "end_line": 125,
          "end_column": 29,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Use ''.join() for concatenating strings in loops",
            "replacement_code": "# Use parts = []; parts.append(item); result = ''.join(parts)",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.15,
            "security_risk": 0.0,
            "carbon_impact": 5.0,
            "maintainability": 0.0,
            "cost_impact": 0.0
          },
          "rule_name": "Inefficient String Concatenation",
          "rule_description": "String concatenation in loop is inefficient",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.114846+00:00"
        },
        {
          "rule_id": "inefficient_string_concat",
          "category": "green",
          "severity": "warning",
          "message": "String concatenation in loop is inefficient. Use join() or f-strings instead",
          "file_path": "src/ecoguard_ai/core/result.py",
          "line": 127,
          "column": 16,
          "end_line": 127,
          "end_column": 29,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Use ''.join() for concatenating strings in loops",
            "replacement_code": "# Use parts = []; parts.append(item); result = ''.join(parts)",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.15,
            "security_risk": 0.0,
            "carbon_impact": 5.0,
            "maintainability": 0.0,
            "cost_impact": 0.0
          },
          "rule_name": "Inefficient String Concatenation",
          "rule_description": "String concatenation in loop is inefficient",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.114857+00:00"
        },
        {
          "rule_id": "inefficient_string_concat",
          "category": "green",
          "severity": "warning",
          "message": "String concatenation in loop is inefficient. Use join() or f-strings instead",
          "file_path": "src/ecoguard_ai/core/result.py",
          "line": 129,
          "column": 16,
          "end_line": 129,
          "end_column": 29,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Use ''.join() for concatenating strings in loops",
            "replacement_code": "# Use parts = []; parts.append(item); result = ''.join(parts)",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.15,
            "security_risk": 0.0,
            "carbon_impact": 5.0,
            "maintainability": 0.0,
            "cost_impact": 0.0
          },
          "rule_name": "Inefficient String Concatenation",
          "rule_description": "String concatenation in loop is inefficient",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.114867+00:00"
        },
        {
          "rule_id": "inefficient_string_concat",
          "category": "green",
          "severity": "warning",
          "message": "String concatenation in loop is inefficient. Use join() or f-strings instead",
          "file_path": "src/ecoguard_ai/core/result.py",
          "line": 131,
          "column": 16,
          "end_line": 131,
          "end_column": 28,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Use ''.join() for concatenating strings in loops",
            "replacement_code": "# Use parts = []; parts.append(item); result = ''.join(parts)",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.15,
            "security_risk": 0.0,
            "carbon_impact": 5.0,
            "maintainability": 0.0,
            "cost_impact": 0.0
          },
          "rule_name": "Inefficient String Concatenation",
          "rule_description": "String concatenation in loop is inefficient",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.114878+00:00"
        },
        {
          "rule_id": "use_generator",
          "category": "green",
          "severity": "info",
          "message": "Consider using generator expression instead of list comprehension for single use",
          "file_path": "src/ecoguard_ai/core/result.py",
          "line": 43,
          "column": 19,
          "end_line": 43,
          "end_column": 75,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Replace [] with () to create generator",
            "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 2.0,
            "maintainability": 0.0,
            "cost_impact": 0.0
          },
          "rule_name": "Use Generator Expression",
          "rule_description": "Consider using generator for memory efficiency",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.116127+00:00"
        },
        {
          "rule_id": "use_generator",
          "category": "green",
          "severity": "info",
          "message": "Consider using generator expression instead of list comprehension for single use",
          "file_path": "src/ecoguard_ai/core/result.py",
          "line": 48,
          "column": 19,
          "end_line": 48,
          "end_column": 77,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Replace [] with () to create generator",
            "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 2.0,
            "maintainability": 0.0,
            "cost_impact": 0.0
          },
          "rule_name": "Use Generator Expression",
          "rule_description": "Consider using generator for memory efficiency",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.116149+00:00"
        },
        {
          "rule_id": "use_generator",
          "category": "green",
          "severity": "info",
          "message": "Consider using generator expression instead of list comprehension for single use",
          "file_path": "src/ecoguard_ai/core/result.py",
          "line": 53,
          "column": 19,
          "end_line": 53,
          "end_column": 74,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Replace [] with () to create generator",
            "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 2.0,
            "maintainability": 0.0,
            "cost_impact": 0.0
          },
          "rule_name": "Use Generator Expression",
          "rule_description": "Consider using generator for memory efficiency",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.116171+00:00"
        },
        {
          "rule_id": "use_generator",
          "category": "green",
          "severity": "info",
          "message": "Consider using generator expression instead of list comprehension for single use",
          "file_path": "src/ecoguard_ai/core/result.py",
          "line": 58,
          "column": 19,
          "end_line": 58,
          "end_column": 78,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Replace [] with () to create generator",
            "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 2.0,
            "maintainability": 0.0,
            "cost_impact": 0.0
          },
          "rule_name": "Use Generator Expression",
          "rule_description": "Consider using generator for memory efficiency",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.116192+00:00"
        },
        {
          "rule_id": "use_generator",
          "category": "green",
          "severity": "info",
          "message": "Consider using generator expression instead of list comprehension for single use",
          "file_path": "src/ecoguard_ai/core/result.py",
          "line": 62,
          "column": 15,
          "end_line": 62,
          "end_column": 65,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Replace [] with () to create generator",
            "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 2.0,
            "maintainability": 0.0,
            "cost_impact": 0.0
          },
          "rule_name": "Use Generator Expression",
          "rule_description": "Consider using generator for memory efficiency",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.116214+00:00"
        },
        {
          "rule_id": "use_generator",
          "category": "green",
          "severity": "info",
          "message": "Consider using generator expression instead of list comprehension for single use",
          "file_path": "src/ecoguard_ai/core/result.py",
          "line": 66,
          "column": 15,
          "end_line": 66,
          "end_column": 65,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Replace [] with () to create generator",
            "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 2.0,
            "maintainability": 0.0,
            "cost_impact": 0.0
          },
          "rule_name": "Use Generator Expression",
          "rule_description": "Consider using generator for memory efficiency",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.116235+00:00"
        },
        {
          "rule_id": "use_generator",
          "category": "green",
          "severity": "info",
          "message": "Consider using generator expression instead of list comprehension for single use",
          "file_path": "src/ecoguard_ai/core/result.py",
          "line": 70,
          "column": 15,
          "end_line": 70,
          "end_column": 63,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Replace [] with () to create generator",
            "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 2.0,
            "maintainability": 0.0,
            "cost_impact": 0.0
          },
          "rule_name": "Use Generator Expression",
          "rule_description": "Consider using generator for memory efficiency",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.116256+00:00"
        },
        {
          "rule_id": "use_generator",
          "category": "green",
          "severity": "info",
          "message": "Consider using generator expression instead of list comprehension for single use",
          "file_path": "src/ecoguard_ai/core/result.py",
          "line": 152,
          "column": 22,
          "end_line": 152,
          "end_column": 64,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Replace [] with () to create generator",
            "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 2.0,
            "maintainability": 0.0,
            "cost_impact": 0.0
          },
          "rule_name": "Use Generator Expression",
          "rule_description": "Consider using generator for memory efficiency",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.116470+00:00"
        },
        {
          "rule_id": "use_generator",
          "category": "green",
          "severity": "info",
          "message": "Consider using generator expression instead of list comprehension for single use",
          "file_path": "src/ecoguard_ai/core/result.py",
          "line": 163,
          "column": 17,
          "end_line": 163,
          "end_column": 87,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Replace [] with () to create generator",
            "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 2.0,
            "maintainability": 0.0,
            "cost_impact": 0.0
          },
          "rule_name": "Use Generator Expression",
          "rule_description": "Consider using generator for memory efficiency",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.116516+00:00"
        },
        {
          "rule_id": "use_generator",
          "category": "green",
          "severity": "info",
          "message": "Consider using generator expression instead of list comprehension for single use",
          "file_path": "src/ecoguard_ai/core/result.py",
          "line": 246,
          "column": 17,
          "end_line": 246,
          "end_column": 81,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Replace [] with () to create generator",
            "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 2.0,
            "maintainability": 0.0,
            "cost_impact": 0.0
          },
          "rule_name": "Use Generator Expression",
          "rule_description": "Consider using generator for memory efficiency",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.116732+00:00"
        },
        {
          "rule_id": "use_generator",
          "category": "green",
          "severity": "info",
          "message": "Consider using generator expression instead of list comprehension for single use",
          "file_path": "src/ecoguard_ai/core/result.py",
          "line": 254,
          "column": 17,
          "end_line": 254,
          "end_column": 84,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Replace [] with () to create generator",
            "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 2.0,
            "maintainability": 0.0,
            "cost_impact": 0.0
          },
          "rule_name": "Use Generator Expression",
          "rule_description": "Consider using generator for memory efficiency",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.116759+00:00"
        },
        {
          "rule_id": "use_generator",
          "category": "green",
          "severity": "info",
          "message": "Consider using generator expression instead of list comprehension for single use",
          "file_path": "src/ecoguard_ai/core/result.py",
          "line": 272,
          "column": 28,
          "end_line": 272,
          "end_column": 78,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Replace [] with () to create generator",
            "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 2.0,
            "maintainability": 0.0,
            "cost_impact": 0.0
          },
          "rule_name": "Use Generator Expression",
          "rule_description": "Consider using generator for memory efficiency",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.116814+00:00"
        },
        {
          "rule_id": "redundant_variable",
          "category": "ai_code",
          "severity": "info",
          "message": "Variable 'score' is assigned and immediately returned",
          "file_path": "src/ecoguard_ai/core/result.py",
          "line": 104,
          "column": 8,
          "end_line": 104,
          "end_column": 41,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Return the expression directly without intermediate variable",
            "replacement_code": "# return expression",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.02,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": 0.2,
            "cost_impact": 0.0
          },
          "rule_name": "Redundant Variable Assignment",
          "rule_description": "Variable assignment is redundant",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.119313+00:00"
        },
        {
          "rule_id": "redundant_variable",
          "category": "ai_code",
          "severity": "info",
          "message": "Variable 'score' is assigned and immediately returned",
          "file_path": "src/ecoguard_ai/core/result.py",
          "line": 133,
          "column": 8,
          "end_line": 133,
          "end_column": 41,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Return the expression directly without intermediate variable",
            "replacement_code": "# return expression",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.02,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": 0.2,
            "cost_impact": 0.0
          },
          "rule_name": "Redundant Variable Assignment",
          "rule_description": "Variable assignment is redundant",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.119384+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'calculate_green_score' appears similar to 'calculate_security_score'",
          "file_path": "src/ecoguard_ai/core/result.py",
          "line": 78,
          "column": 4,
          "end_line": 105,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.120695+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'all_issues' appears similar to 'get_summary_by_category'",
          "file_path": "src/ecoguard_ai/core/result.py",
          "line": 212,
          "column": 4,
          "end_line": 217,
          "end_column": 21,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.120709+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'all_issues' appears similar to 'get_summary_by_severity'",
          "file_path": "src/ecoguard_ai/core/result.py",
          "line": 212,
          "column": 4,
          "end_line": 217,
          "end_column": 21,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.120714+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'get_summary_by_category' appears similar to 'get_summary_by_severity'",
          "file_path": "src/ecoguard_ai/core/result.py",
          "line": 219,
          "column": 4,
          "end_line": 228,
          "end_column": 22,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.120719+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'calculate_overall_green_score' appears similar to 'calculate_overall_security_score'",
          "file_path": "src/ecoguard_ai/core/result.py",
          "line": 241,
          "column": 4,
          "end_line": 247,
          "end_column": 40,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.120724+00:00"
        }
      ],
      "metadata": {
        "file_path": "src/ecoguard_ai/core/result.py",
        "file_size": 9650,
        "line_count": 278
      }
    },
    {
      "file_path": "src/ecoguard_ai/core/issue.py",
      "analysis_time": "2025-06-07T15:30:57.132095+00:00",
      "summary": {
        "total_issues": 7,
        "critical": 0,
        "error": 0,
        "warning": 5,
        "info": 2,
        "green_score": 100.0,
        "security_score": 100.0
      },
      "issues": [
        {
          "rule_id": "unused_import",
          "category": "quality",
          "severity": "info",
          "message": "Import 'EcoGuardAnalyzer' is not used",
          "file_path": "src/ecoguard_ai/core/issue.py",
          "line": 3,
          "column": 0,
          "end_line": 3,
          "end_column": 70,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused import 'EcoGuardAnalyzer'",
            "replacement_code": "# Remove import line",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.2,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Import",
          "rule_description": "Import statement is not used in the module",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.124976+00:00"
        },
        {
          "rule_id": "unused_import",
          "category": "quality",
          "severity": "info",
          "message": "Import 'ProjectAnalysisResult' is not used",
          "file_path": "src/ecoguard_ai/core/issue.py",
          "line": 5,
          "column": 0,
          "end_line": 5,
          "end_column": 73,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused import 'ProjectAnalysisResult'",
            "replacement_code": "# Remove import line",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.2,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Import",
          "rule_description": "Import statement is not used in the module",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.124983+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'calculate_green_score' appears similar to 'calculate_security_score'",
          "file_path": "src/ecoguard_ai/core/issue.py",
          "line": 78,
          "column": 4,
          "end_line": 105,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.130961+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'all_issues' appears similar to 'get_summary_by_category'",
          "file_path": "src/ecoguard_ai/core/issue.py",
          "line": 212,
          "column": 4,
          "end_line": 217,
          "end_column": 21,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.130981+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'all_issues' appears similar to 'get_summary_by_severity'",
          "file_path": "src/ecoguard_ai/core/issue.py",
          "line": 212,
          "column": 4,
          "end_line": 217,
          "end_column": 21,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.130985+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'get_summary_by_category' appears similar to 'get_summary_by_severity'",
          "file_path": "src/ecoguard_ai/core/issue.py",
          "line": 219,
          "column": 4,
          "end_line": 228,
          "end_column": 22,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.130990+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'calculate_overall_green_score' appears similar to 'calculate_overall_security_score'",
          "file_path": "src/ecoguard_ai/core/issue.py",
          "line": 241,
          "column": 4,
          "end_line": 247,
          "end_column": 40,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.130996+00:00"
        }
      ],
      "metadata": {
        "file_path": "src/ecoguard_ai/core/issue.py",
        "file_size": 7047,
        "line_count": 237
      }
    },
    {
      "file_path": "src/ecoguard_ai/cli/__init__.py",
      "analysis_time": "2025-06-07T15:30:57.148030+00:00",
      "summary": {
        "total_issues": 10,
        "critical": 0,
        "error": 0,
        "warning": 6,
        "info": 4,
        "green_score": 85.0,
        "security_score": 100.0
      },
      "issues": [
        {
          "rule_id": "too_many_params",
          "category": "quality",
          "severity": "info",
          "message": "Function 'analyze' has 9 parameters (max: 5)",
          "file_path": "src/ecoguard_ai/cli/__init__.py",
          "line": 63,
          "column": 0,
          "end_line": 123,
          "end_column": 19,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider using a data class or dictionary to group related parameters",
            "replacement_code": "# Group related parameters into a data structure",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": 0.0,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Too Many Parameters",
          "rule_description": "Function has too many parameters",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.137689+00:00"
        },
        {
          "rule_id": "use_list_comprehension",
          "category": "green",
          "severity": "info",
          "message": "Consider using list comprehension instead of append in loop",
          "file_path": "src/ecoguard_ai/cli/__init__.py",
          "line": 169,
          "column": 12,
          "end_line": 170,
          "end_column": 47,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Replace with list comprehension for better performance",
            "replacement_code": "# result = [expr for item in iterable]",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.08,
            "security_risk": 0.0,
            "carbon_impact": 3.0,
            "maintainability": 0.0,
            "cost_impact": 0.0
          },
          "rule_name": "Use List Comprehension",
          "rule_description": "Consider using list comprehension for better performance",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.139839+00:00"
        },
        {
          "rule_id": "use_list_comprehension",
          "category": "green",
          "severity": "info",
          "message": "Consider using list comprehension instead of append in loop",
          "file_path": "src/ecoguard_ai/cli/__init__.py",
          "line": 218,
          "column": 16,
          "end_line": 219,
          "end_column": 53,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Replace with list comprehension for better performance",
            "replacement_code": "# result = [expr for item in iterable]",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.08,
            "security_risk": 0.0,
            "carbon_impact": 3.0,
            "maintainability": 0.0,
            "cost_impact": 0.0
          },
          "rule_name": "Use List Comprehension",
          "rule_description": "Consider using list comprehension for better performance",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.139993+00:00"
        },
        {
          "rule_id": "use_generator",
          "category": "green",
          "severity": "info",
          "message": "Consider using generator expression instead of list comprehension for single use",
          "file_path": "src/ecoguard_ai/cli/__init__.py",
          "line": 309,
          "column": 24,
          "end_line": 309,
          "end_column": 76,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Replace [] with () to create generator",
            "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 2.0,
            "maintainability": 0.0,
            "cost_impact": 0.0
          },
          "rule_name": "Use Generator Expression",
          "rule_description": "Consider using generator for memory efficiency",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.141232+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'calculate_green_score' appears similar to 'calculate_security_score'",
          "file_path": "src/ecoguard_ai/cli/__init__.py",
          "line": 78,
          "column": 4,
          "end_line": 105,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.146116+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'all_issues' appears similar to 'get_summary_by_category'",
          "file_path": "src/ecoguard_ai/cli/__init__.py",
          "line": 212,
          "column": 4,
          "end_line": 217,
          "end_column": 21,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.146145+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'all_issues' appears similar to 'get_summary_by_severity'",
          "file_path": "src/ecoguard_ai/cli/__init__.py",
          "line": 212,
          "column": 4,
          "end_line": 217,
          "end_column": 21,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.146149+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'get_summary_by_category' appears similar to 'get_summary_by_severity'",
          "file_path": "src/ecoguard_ai/cli/__init__.py",
          "line": 219,
          "column": 4,
          "end_line": 228,
          "end_column": 22,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.146155+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'calculate_overall_green_score' appears similar to 'calculate_overall_security_score'",
          "file_path": "src/ecoguard_ai/cli/__init__.py",
          "line": 241,
          "column": 4,
          "end_line": 247,
          "end_column": 40,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.146163+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'severity_score' appears similar to '_get_severity_color'",
          "file_path": "src/ecoguard_ai/cli/__init__.py",
          "line": 147,
          "column": 4,
          "end_line": 156,
          "end_column": 52,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.146177+00:00"
        }
      ],
      "metadata": {
        "file_path": "src/ecoguard_ai/cli/__init__.py",
        "file_size": 11676,
        "line_count": 352
      }
    },
    {
      "file_path": "src/ecoguard_ai/analyzers/green/__init__.py",
      "analysis_time": "2025-06-07T15:30:57.158765+00:00",
      "summary": {
        "total_issues": 27,
        "critical": 0,
        "error": 0,
        "warning": 27,
        "info": 0,
        "green_score": 100.0,
        "security_score": 100.0
      },
      "issues": [
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'self' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/green/__init__.py",
          "line": 65,
          "column": 29,
          "end_line": 65,
          "end_column": 33,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'self' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _self",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.149283+00:00"
        },
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'self' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/green/__init__.py",
          "line": 76,
          "column": 17,
          "end_line": 76,
          "end_column": 21,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'self' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _self",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.149311+00:00"
        },
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'self' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/green/__init__.py",
          "line": 102,
          "column": 31,
          "end_line": 102,
          "end_column": 35,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'self' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _self",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.149409+00:00"
        },
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'self' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/green/__init__.py",
          "line": 120,
          "column": 17,
          "end_line": 120,
          "end_column": 21,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'self' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _self",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.149431+00:00"
        },
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'self' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/green/__init__.py",
          "line": 153,
          "column": 31,
          "end_line": 153,
          "end_column": 35,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'self' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _self",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.149488+00:00"
        },
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'node' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/green/__init__.py",
          "line": 153,
          "column": 37,
          "end_line": 153,
          "end_column": 55,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'node' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _node",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.149491+00:00"
        },
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'self' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/green/__init__.py",
          "line": 163,
          "column": 17,
          "end_line": 163,
          "end_column": 21,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'self' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _self",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.149512+00:00"
        },
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'self' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/green/__init__.py",
          "line": 194,
          "column": 27,
          "end_line": 194,
          "end_column": 31,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'self' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _self",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.149586+00:00"
        },
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'node' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/green/__init__.py",
          "line": 194,
          "column": 33,
          "end_line": 194,
          "end_column": 46,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'node' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _node",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.149589+00:00"
        },
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'self' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/green/__init__.py",
          "line": 203,
          "column": 17,
          "end_line": 203,
          "end_column": 21,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'self' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _self",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.149611+00:00"
        },
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'self' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/green/__init__.py",
          "line": 229,
          "column": 30,
          "end_line": 229,
          "end_column": 34,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'self' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _self",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.149722+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'calculate_green_score' appears similar to 'calculate_security_score'",
          "file_path": "src/ecoguard_ai/analyzers/green/__init__.py",
          "line": 78,
          "column": 4,
          "end_line": 105,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.157331+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'all_issues' appears similar to 'get_summary_by_category'",
          "file_path": "src/ecoguard_ai/analyzers/green/__init__.py",
          "line": 212,
          "column": 4,
          "end_line": 217,
          "end_column": 21,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.157379+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'all_issues' appears similar to 'get_summary_by_severity'",
          "file_path": "src/ecoguard_ai/analyzers/green/__init__.py",
          "line": 212,
          "column": 4,
          "end_line": 217,
          "end_column": 21,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.157382+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'get_summary_by_category' appears similar to 'get_summary_by_severity'",
          "file_path": "src/ecoguard_ai/analyzers/green/__init__.py",
          "line": 219,
          "column": 4,
          "end_line": 228,
          "end_column": 22,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.157389+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'calculate_overall_green_score' appears similar to 'calculate_overall_security_score'",
          "file_path": "src/ecoguard_ai/analyzers/green/__init__.py",
          "line": 241,
          "column": 4,
          "end_line": 247,
          "end_column": 40,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.157400+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'severity_score' appears similar to '_get_severity_color'",
          "file_path": "src/ecoguard_ai/analyzers/green/__init__.py",
          "line": 147,
          "column": 4,
          "end_line": 156,
          "end_column": 52,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.157424+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_For' appears similar to 'visit_While'",
          "file_path": "src/ecoguard_ai/analyzers/green/__init__.py",
          "line": 34,
          "column": 4,
          "end_line": 37,
          "end_column": 28,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.157462+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function '_is_string_operation' appears similar to '_is_simple_append_loop'",
          "file_path": "src/ecoguard_ai/analyzers/green/__init__.py",
          "line": 65,
          "column": 4,
          "end_line": 70,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.157474+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function '_is_string_operation' appears similar to '_is_range_len_pattern'",
          "file_path": "src/ecoguard_ai/analyzers/green/__init__.py",
          "line": 65,
          "column": 4,
          "end_line": 70,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.157479+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_For' appears similar to 'visit_ListComp'",
          "file_path": "src/ecoguard_ai/analyzers/green/__init__.py",
          "line": 85,
          "column": 4,
          "end_line": 100,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.157484+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_For' appears similar to 'visit_Call'",
          "file_path": "src/ecoguard_ai/analyzers/green/__init__.py",
          "line": 85,
          "column": 4,
          "end_line": 100,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.157487+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_For' appears similar to 'visit_For'",
          "file_path": "src/ecoguard_ai/analyzers/green/__init__.py",
          "line": 85,
          "column": 4,
          "end_line": 100,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.157490+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function '_is_simple_append_loop' appears similar to '_is_range_len_pattern'",
          "file_path": "src/ecoguard_ai/analyzers/green/__init__.py",
          "line": 102,
          "column": 4,
          "end_line": 114,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.157496+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_ListComp' appears similar to 'visit_Call'",
          "file_path": "src/ecoguard_ai/analyzers/green/__init__.py",
          "line": 129,
          "column": 4,
          "end_line": 151,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.157500+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_ListComp' appears similar to 'visit_For'",
          "file_path": "src/ecoguard_ai/analyzers/green/__init__.py",
          "line": 129,
          "column": 4,
          "end_line": 151,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.157503+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_Call' appears similar to 'visit_For'",
          "file_path": "src/ecoguard_ai/analyzers/green/__init__.py",
          "line": 172,
          "column": 4,
          "end_line": 192,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.157508+00:00"
        }
      ],
      "metadata": {
        "file_path": "src/ecoguard_ai/analyzers/green/__init__.py",
        "file_size": 10673,
        "line_count": 295
      }
    },
    {
      "file_path": "src/ecoguard_ai/analyzers/quality/__init__.py",
      "analysis_time": "2025-06-07T15:30:57.171379+00:00",
      "summary": {
        "total_issues": 23,
        "critical": 0,
        "error": 0,
        "warning": 23,
        "info": 0,
        "green_score": 70.0,
        "security_score": 100.0
      },
      "issues": [
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'self' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/quality/__init__.py",
          "line": 170,
          "column": 30,
          "end_line": 170,
          "end_column": 34,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'self' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _self",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.160566+00:00"
        },
        {
          "rule_id": "inefficient_string_concat",
          "category": "green",
          "severity": "warning",
          "message": "String concatenation in loop is inefficient. Use join() or f-strings instead",
          "file_path": "src/ecoguard_ai/analyzers/quality/__init__.py",
          "line": 187,
          "column": 16,
          "end_line": 187,
          "end_column": 31,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Use ''.join() for concatenating strings in loops",
            "replacement_code": "# Use parts = []; parts.append(item); result = ''.join(parts)",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.15,
            "security_risk": 0.0,
            "carbon_impact": 5.0,
            "maintainability": 0.0,
            "cost_impact": 0.0
          },
          "rule_name": "Inefficient String Concatenation",
          "rule_description": "String concatenation in loop is inefficient",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.164386+00:00"
        },
        {
          "rule_id": "inefficient_string_concat",
          "category": "green",
          "severity": "warning",
          "message": "String concatenation in loop is inefficient. Use join() or f-strings instead",
          "file_path": "src/ecoguard_ai/analyzers/quality/__init__.py",
          "line": 190,
          "column": 16,
          "end_line": 190,
          "end_column": 51,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Use ''.join() for concatenating strings in loops",
            "replacement_code": "# Use parts = []; parts.append(item); result = ''.join(parts)",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.15,
            "security_risk": 0.0,
            "carbon_impact": 5.0,
            "maintainability": 0.0,
            "cost_impact": 0.0
          },
          "rule_name": "Inefficient String Concatenation",
          "rule_description": "String concatenation in loop is inefficient",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.164399+00:00"
        },
        {
          "rule_id": "inefficient_string_concat",
          "category": "green",
          "severity": "warning",
          "message": "String concatenation in loop is inefficient. Use join() or f-strings instead",
          "file_path": "src/ecoguard_ai/analyzers/quality/__init__.py",
          "line": 192,
          "column": 16,
          "end_line": 192,
          "end_column": 31,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Use ''.join() for concatenating strings in loops",
            "replacement_code": "# Use parts = []; parts.append(item); result = ''.join(parts)",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.15,
            "security_risk": 0.0,
            "carbon_impact": 5.0,
            "maintainability": 0.0,
            "cost_impact": 0.0
          },
          "rule_name": "Inefficient String Concatenation",
          "rule_description": "String concatenation in loop is inefficient",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.164416+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'calculate_green_score' appears similar to 'calculate_security_score'",
          "file_path": "src/ecoguard_ai/analyzers/quality/__init__.py",
          "line": 78,
          "column": 4,
          "end_line": 105,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.169670+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'all_issues' appears similar to 'get_summary_by_category'",
          "file_path": "src/ecoguard_ai/analyzers/quality/__init__.py",
          "line": 212,
          "column": 4,
          "end_line": 217,
          "end_column": 21,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.169736+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'all_issues' appears similar to 'get_summary_by_severity'",
          "file_path": "src/ecoguard_ai/analyzers/quality/__init__.py",
          "line": 212,
          "column": 4,
          "end_line": 217,
          "end_column": 21,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.169739+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'get_summary_by_category' appears similar to 'get_summary_by_severity'",
          "file_path": "src/ecoguard_ai/analyzers/quality/__init__.py",
          "line": 219,
          "column": 4,
          "end_line": 228,
          "end_column": 22,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.169748+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'calculate_overall_green_score' appears similar to 'calculate_overall_security_score'",
          "file_path": "src/ecoguard_ai/analyzers/quality/__init__.py",
          "line": 241,
          "column": 4,
          "end_line": 247,
          "end_column": 40,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.169763+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'severity_score' appears similar to '_get_severity_color'",
          "file_path": "src/ecoguard_ai/analyzers/quality/__init__.py",
          "line": 147,
          "column": 4,
          "end_line": 156,
          "end_column": 52,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.169798+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_For' appears similar to 'visit_While'",
          "file_path": "src/ecoguard_ai/analyzers/quality/__init__.py",
          "line": 34,
          "column": 4,
          "end_line": 37,
          "end_column": 28,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.169865+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function '_is_string_operation' appears similar to '_is_simple_append_loop'",
          "file_path": "src/ecoguard_ai/analyzers/quality/__init__.py",
          "line": 65,
          "column": 4,
          "end_line": 70,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.169884+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function '_is_string_operation' appears similar to '_is_range_len_pattern'",
          "file_path": "src/ecoguard_ai/analyzers/quality/__init__.py",
          "line": 65,
          "column": 4,
          "end_line": 70,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.169889+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_For' appears similar to 'visit_ListComp'",
          "file_path": "src/ecoguard_ai/analyzers/quality/__init__.py",
          "line": 85,
          "column": 4,
          "end_line": 100,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.169898+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_For' appears similar to 'visit_Call'",
          "file_path": "src/ecoguard_ai/analyzers/quality/__init__.py",
          "line": 85,
          "column": 4,
          "end_line": 100,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.169901+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_For' appears similar to 'visit_For'",
          "file_path": "src/ecoguard_ai/analyzers/quality/__init__.py",
          "line": 85,
          "column": 4,
          "end_line": 100,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.169904+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function '_is_simple_append_loop' appears similar to '_is_range_len_pattern'",
          "file_path": "src/ecoguard_ai/analyzers/quality/__init__.py",
          "line": 102,
          "column": 4,
          "end_line": 114,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.169912+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_ListComp' appears similar to 'visit_Call'",
          "file_path": "src/ecoguard_ai/analyzers/quality/__init__.py",
          "line": 129,
          "column": 4,
          "end_line": 151,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.169920+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_ListComp' appears similar to 'visit_For'",
          "file_path": "src/ecoguard_ai/analyzers/quality/__init__.py",
          "line": 129,
          "column": 4,
          "end_line": 151,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.169923+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_Call' appears similar to 'visit_For'",
          "file_path": "src/ecoguard_ai/analyzers/quality/__init__.py",
          "line": 172,
          "column": 4,
          "end_line": 192,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.169934+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'analyze' appears similar to 'analyze'",
          "file_path": "src/ecoguard_ai/analyzers/quality/__init__.py",
          "line": 268,
          "column": 4,
          "end_line": 295,
          "end_column": 25,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.169953+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function '__init__' appears similar to '__init__'",
          "file_path": "src/ecoguard_ai/analyzers/quality/__init__.py",
          "line": 24,
          "column": 4,
          "end_line": 33,
          "end_column": 44,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.169957+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_FunctionDef' appears similar to 'visit_FunctionDef'",
          "file_path": "src/ecoguard_ai/analyzers/quality/__init__.py",
          "line": 152,
          "column": 4,
          "end_line": 168,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.169974+00:00"
        }
      ],
      "metadata": {
        "file_path": "src/ecoguard_ai/analyzers/quality/__init__.py",
        "file_size": 9901,
        "line_count": 279
      }
    },
    {
      "file_path": "src/ecoguard_ai/analyzers/security/__init__.py",
      "analysis_time": "2025-06-07T15:30:57.172904+00:00",
      "summary": {
        "total_issues": 24,
        "critical": 0,
        "error": 0,
        "warning": 24,
        "info": 0,
        "green_score": 100.0,
        "security_score": 100.0
      },
      "issues": [
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'self' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/security/__init__.py",
          "line": 28,
          "column": 17,
          "end_line": 28,
          "end_column": 21,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'self' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _self",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.171784+00:00"
        },
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'self' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/security/__init__.py",
          "line": 34,
          "column": 16,
          "end_line": 34,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'self' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _self",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.171805+00:00"
        },
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'tree' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/security/__init__.py",
          "line": 34,
          "column": 22,
          "end_line": 34,
          "end_column": 35,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'tree' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _tree",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.171808+00:00"
        },
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'source_code' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/security/__init__.py",
          "line": 34,
          "column": 37,
          "end_line": 34,
          "end_column": 53,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'source_code' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _source_code",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.171811+00:00"
        },
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'file_path' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/security/__init__.py",
          "line": 34,
          "column": 55,
          "end_line": 34,
          "end_column": 69,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'file_path' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _file_path",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.171813+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'calculate_green_score' appears similar to 'calculate_security_score'",
          "file_path": "src/ecoguard_ai/analyzers/security/__init__.py",
          "line": 78,
          "column": 4,
          "end_line": 105,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.172508+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'all_issues' appears similar to 'get_summary_by_category'",
          "file_path": "src/ecoguard_ai/analyzers/security/__init__.py",
          "line": 212,
          "column": 4,
          "end_line": 217,
          "end_column": 21,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.172574+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'all_issues' appears similar to 'get_summary_by_severity'",
          "file_path": "src/ecoguard_ai/analyzers/security/__init__.py",
          "line": 212,
          "column": 4,
          "end_line": 217,
          "end_column": 21,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.172577+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'get_summary_by_category' appears similar to 'get_summary_by_severity'",
          "file_path": "src/ecoguard_ai/analyzers/security/__init__.py",
          "line": 219,
          "column": 4,
          "end_line": 228,
          "end_column": 22,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.172586+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'calculate_overall_green_score' appears similar to 'calculate_overall_security_score'",
          "file_path": "src/ecoguard_ai/analyzers/security/__init__.py",
          "line": 241,
          "column": 4,
          "end_line": 247,
          "end_column": 40,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.172601+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'severity_score' appears similar to '_get_severity_color'",
          "file_path": "src/ecoguard_ai/analyzers/security/__init__.py",
          "line": 147,
          "column": 4,
          "end_line": 156,
          "end_column": 52,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.172638+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_For' appears similar to 'visit_While'",
          "file_path": "src/ecoguard_ai/analyzers/security/__init__.py",
          "line": 34,
          "column": 4,
          "end_line": 37,
          "end_column": 28,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.172706+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function '_is_string_operation' appears similar to '_is_simple_append_loop'",
          "file_path": "src/ecoguard_ai/analyzers/security/__init__.py",
          "line": 65,
          "column": 4,
          "end_line": 70,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.172725+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function '_is_string_operation' appears similar to '_is_range_len_pattern'",
          "file_path": "src/ecoguard_ai/analyzers/security/__init__.py",
          "line": 65,
          "column": 4,
          "end_line": 70,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.172730+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_For' appears similar to 'visit_ListComp'",
          "file_path": "src/ecoguard_ai/analyzers/security/__init__.py",
          "line": 85,
          "column": 4,
          "end_line": 100,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.172739+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_For' appears similar to 'visit_Call'",
          "file_path": "src/ecoguard_ai/analyzers/security/__init__.py",
          "line": 85,
          "column": 4,
          "end_line": 100,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.172742+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_For' appears similar to 'visit_For'",
          "file_path": "src/ecoguard_ai/analyzers/security/__init__.py",
          "line": 85,
          "column": 4,
          "end_line": 100,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.172746+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function '_is_simple_append_loop' appears similar to '_is_range_len_pattern'",
          "file_path": "src/ecoguard_ai/analyzers/security/__init__.py",
          "line": 102,
          "column": 4,
          "end_line": 114,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.172754+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_ListComp' appears similar to 'visit_Call'",
          "file_path": "src/ecoguard_ai/analyzers/security/__init__.py",
          "line": 129,
          "column": 4,
          "end_line": 151,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.172762+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_ListComp' appears similar to 'visit_For'",
          "file_path": "src/ecoguard_ai/analyzers/security/__init__.py",
          "line": 129,
          "column": 4,
          "end_line": 151,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.172765+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_Call' appears similar to 'visit_For'",
          "file_path": "src/ecoguard_ai/analyzers/security/__init__.py",
          "line": 172,
          "column": 4,
          "end_line": 192,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.172777+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'analyze' appears similar to 'analyze'",
          "file_path": "src/ecoguard_ai/analyzers/security/__init__.py",
          "line": 268,
          "column": 4,
          "end_line": 295,
          "end_column": 25,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.172797+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function '__init__' appears similar to '__init__'",
          "file_path": "src/ecoguard_ai/analyzers/security/__init__.py",
          "line": 24,
          "column": 4,
          "end_line": 33,
          "end_column": 44,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.172802+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_FunctionDef' appears similar to 'visit_FunctionDef'",
          "file_path": "src/ecoguard_ai/analyzers/security/__init__.py",
          "line": 152,
          "column": 4,
          "end_line": 168,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.172822+00:00"
        }
      ],
      "metadata": {
        "file_path": "src/ecoguard_ai/analyzers/security/__init__.py",
        "file_size": 1295,
        "line_count": 48
      }
    },
    {
      "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
      "analysis_time": "2025-06-07T15:30:57.188823+00:00",
      "summary": {
        "total_issues": 68,
        "critical": 0,
        "error": 0,
        "warning": 68,
        "info": 0,
        "green_score": 100.0,
        "security_score": 100.0
      },
      "issues": [
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'self' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 21,
          "column": 17,
          "end_line": 21,
          "end_column": 21,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'self' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _self",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.174294+00:00"
        },
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'self' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 47,
          "column": 32,
          "end_line": 47,
          "end_column": 36,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'self' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _self",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.174384+00:00"
        },
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'self' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 74,
          "column": 36,
          "end_line": 74,
          "end_column": 40,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'self' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _self",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.174516+00:00"
        },
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'self' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 103,
          "column": 17,
          "end_line": 103,
          "end_column": 21,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'self' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _self",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.174538+00:00"
        },
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'self' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 182,
          "column": 8,
          "end_line": 182,
          "end_column": 12,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'self' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _self",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.174873+00:00"
        },
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'self' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 203,
          "column": 17,
          "end_line": 203,
          "end_column": 21,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'self' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _self",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.174899+00:00"
        },
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'self' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 231,
          "column": 29,
          "end_line": 231,
          "end_column": 33,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'self' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _self",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.174983+00:00"
        },
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'self' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 235,
          "column": 23,
          "end_line": 235,
          "end_column": 27,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'self' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _self",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.175029+00:00"
        },
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'self' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 248,
          "column": 17,
          "end_line": 248,
          "end_column": 21,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'self' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _self",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.175053+00:00"
        },
        {
          "rule_id": "unused_variable",
          "category": "quality",
          "severity": "warning",
          "message": "Variable 'self' is defined but never used",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 290,
          "column": 23,
          "end_line": 290,
          "end_column": 27,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Remove unused variable 'self' or prefix with underscore if intentional",
            "replacement_code": "# Remove line or rename to _self",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.1,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.5,
            "cost_impact": 0.0
          },
          "rule_name": "Unused Variable",
          "rule_description": "Variable is defined but never used",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.175195+00:00"
        },
        {
          "rule_id": "function_complexity",
          "category": "quality",
          "severity": "warning",
          "message": "Function '_has_verbose_return_pattern' has complexity 11 (max: 10)",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 74,
          "column": 4,
          "end_line": 97,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider breaking this function into smaller functions",
            "replacement_code": "# Refactor into smaller, more focused functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.3,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "High Function Complexity",
          "rule_description": "Function has high cyclomatic complexity",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.176751+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'calculate_green_score' appears similar to 'calculate_security_score'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 78,
          "column": 4,
          "end_line": 105,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186412+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'all_issues' appears similar to 'get_summary_by_category'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 212,
          "column": 4,
          "end_line": 217,
          "end_column": 21,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186505+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'all_issues' appears similar to 'get_summary_by_severity'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 212,
          "column": 4,
          "end_line": 217,
          "end_column": 21,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186508+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'get_summary_by_category' appears similar to 'get_summary_by_severity'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 219,
          "column": 4,
          "end_line": 228,
          "end_column": 22,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186519+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'calculate_overall_green_score' appears similar to 'calculate_overall_security_score'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 241,
          "column": 4,
          "end_line": 247,
          "end_column": 40,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186537+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'severity_score' appears similar to '_get_severity_color'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 147,
          "column": 4,
          "end_line": 156,
          "end_column": 52,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186586+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_For' appears similar to 'visit_While'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 34,
          "column": 4,
          "end_line": 37,
          "end_column": 28,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186687+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function '_is_string_operation' appears similar to '_is_simple_append_loop'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 65,
          "column": 4,
          "end_line": 70,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186718+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function '_is_string_operation' appears similar to '_is_range_len_pattern'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 65,
          "column": 4,
          "end_line": 70,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186723+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function '_is_string_operation' appears similar to '_is_redundant_nested_if'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 65,
          "column": 4,
          "end_line": 70,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186729+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function '_is_string_operation' appears similar to '_is_unnecessary_none_check'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 65,
          "column": 4,
          "end_line": 70,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186735+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function '_is_string_operation' appears similar to '_is_none_check'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 65,
          "column": 4,
          "end_line": 70,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186738+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_For' appears similar to 'visit_ListComp'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 85,
          "column": 4,
          "end_line": 100,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186748+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_For' appears similar to 'visit_Call'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 85,
          "column": 4,
          "end_line": 100,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186751+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_For' appears similar to 'visit_For'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 85,
          "column": 4,
          "end_line": 100,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186754+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_For' appears similar to 'visit_If'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 85,
          "column": 4,
          "end_line": 100,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186760+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_For' appears similar to 'visit_FunctionDef'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 85,
          "column": 4,
          "end_line": 100,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186763+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_For' appears similar to 'visit_FunctionDef'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 85,
          "column": 4,
          "end_line": 100,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186768+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_For' appears similar to 'visit_If'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 85,
          "column": 4,
          "end_line": 100,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186771+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function '_is_simple_append_loop' appears similar to '_is_range_len_pattern'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 102,
          "column": 4,
          "end_line": 114,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186777+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function '_is_simple_append_loop' appears similar to '_is_redundant_nested_if'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 102,
          "column": 4,
          "end_line": 114,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186783+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function '_is_simple_append_loop' appears similar to '_is_unnecessary_none_check'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 102,
          "column": 4,
          "end_line": 114,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186790+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function '_is_simple_append_loop' appears similar to '_is_none_check'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 102,
          "column": 4,
          "end_line": 114,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186793+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_ListComp' appears similar to 'visit_Call'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 129,
          "column": 4,
          "end_line": 151,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186805+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_ListComp' appears similar to 'visit_For'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 129,
          "column": 4,
          "end_line": 151,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186808+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_ListComp' appears similar to 'visit_If'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 129,
          "column": 4,
          "end_line": 151,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186815+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_ListComp' appears similar to 'visit_FunctionDef'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 129,
          "column": 4,
          "end_line": 151,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186818+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_ListComp' appears similar to 'visit_FunctionDef'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 129,
          "column": 4,
          "end_line": 151,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186823+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_ListComp' appears similar to 'visit_If'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 129,
          "column": 4,
          "end_line": 151,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186826+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_Call' appears similar to 'visit_For'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 172,
          "column": 4,
          "end_line": 192,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186841+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_Call' appears similar to 'visit_If'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 172,
          "column": 4,
          "end_line": 192,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186846+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_Call' appears similar to 'visit_FunctionDef'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 172,
          "column": 4,
          "end_line": 192,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186850+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_Call' appears similar to 'visit_FunctionDef'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 172,
          "column": 4,
          "end_line": 192,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186854+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_Call' appears similar to 'visit_If'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 172,
          "column": 4,
          "end_line": 192,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186858+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_For' appears similar to 'visit_If'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 212,
          "column": 4,
          "end_line": 227,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186875+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_For' appears similar to 'visit_FunctionDef'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 212,
          "column": 4,
          "end_line": 227,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186878+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_For' appears similar to 'visit_FunctionDef'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 212,
          "column": 4,
          "end_line": 227,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186883+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_For' appears similar to 'visit_If'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 212,
          "column": 4,
          "end_line": 227,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186886+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function '_is_range_len_pattern' appears similar to '_is_redundant_nested_if'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 229,
          "column": 4,
          "end_line": 241,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186893+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function '_is_range_len_pattern' appears similar to '_is_unnecessary_none_check'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 229,
          "column": 4,
          "end_line": 241,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186899+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function '_is_range_len_pattern' appears similar to '_is_none_check'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 229,
          "column": 4,
          "end_line": 241,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186902+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function '__init__' appears similar to '__init__'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 255,
          "column": 4,
          "end_line": 266,
          "end_column": 47,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186909+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'analyze' appears similar to 'analyze'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 268,
          "column": 4,
          "end_line": 295,
          "end_column": 25,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186914+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'analyze' appears similar to 'analyze'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 268,
          "column": 4,
          "end_line": 295,
          "end_column": 25,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186919+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function '__init__' appears similar to '__init__'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 24,
          "column": 4,
          "end_line": 33,
          "end_column": 44,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186922+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_FunctionDef' appears similar to 'visit_FunctionDef'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 152,
          "column": 4,
          "end_line": 168,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186968+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'analyze' appears similar to 'analyze'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 252,
          "column": 4,
          "end_line": 279,
          "end_column": 25,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.186990+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_If' appears similar to 'visit_FunctionDef'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 30,
          "column": 4,
          "end_line": 45,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.187001+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_If' appears similar to 'visit_FunctionDef'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 30,
          "column": 4,
          "end_line": 45,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.187006+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_If' appears similar to 'visit_If'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 30,
          "column": 4,
          "end_line": 45,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.187009+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function '_is_redundant_nested_if' appears similar to '_is_unnecessary_none_check'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 47,
          "column": 4,
          "end_line": 55,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.187016+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function '_is_redundant_nested_if' appears similar to '_is_none_check'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 47,
          "column": 4,
          "end_line": 55,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.187019+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_FunctionDef' appears similar to 'visit_FunctionDef'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 57,
          "column": 4,
          "end_line": 72,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.187024+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_FunctionDef' appears similar to 'visit_If'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 57,
          "column": 4,
          "end_line": 72,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.187028+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_FunctionDef' appears similar to 'visit_FunctionDef'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 112,
          "column": 4,
          "end_line": 115,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.187037+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function 'visit_FunctionDef' appears similar to 'visit_If'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 212,
          "column": 4,
          "end_line": 229,
          "end_column": 32,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.187051+00:00"
        },
        {
          "rule_id": "duplicate_function",
          "category": "ai_code",
          "severity": "warning",
          "message": "Function '_is_unnecessary_none_check' appears similar to '_is_none_check'",
          "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
          "line": 274,
          "column": 4,
          "end_line": 288,
          "end_column": 20,
          "description": null,
          "code_snippet": null,
          "suggested_fix": {
            "description": "Consider extracting common logic into a shared function",
            "replacement_code": "# Extract common patterns into reusable functions",
            "can_auto_fix": false,
            "confidence": 0.0,
            "instructions": null
          },
          "impact": {
            "performance": -0.05,
            "security_risk": 0.0,
            "carbon_impact": 0.0,
            "maintainability": -0.8,
            "cost_impact": 0.0
          },
          "rule_name": "Potential Duplicate Function",
          "rule_description": "Function appears similar to another function",
          "references": [],
          "tags": [],
          "ai_generated": false,
          "ai_confidence": null,
          "created_at": "2025-06-07T15:30:57.187058+00:00"
        }
      ],
      "metadata": {
        "file_path": "src/ecoguard_ai/analyzers/ai_code/__init__.py",
        "file_size": 13539,
        "line_count": 351
      }
    }
  ],
  "metadata": {}
}
